var s=require("@actions/core"),d=require("@actions/github"),{Octokit:g}=require("@octokit/rest"),h=require("axios"),y=s.getInput("gh-token"),w=s.getInput("openai-api-key"),u=new g({auth:y}),b=async t=>(await h.post("https://api.openai.com/v1/chat/completions",{model:"gpt-3.5-turbo",messages:[{role:"system",content:"You are a helpful assistant that reviews code."},{role:"user",content:`Review the following code and provide feedback. Additionally, please offer your best suggestions for improvement:

${t}`}],max_tokens:150,n:1,stop:null,temperature:.7},{headers:{"Content-Type":"application/json",Authorization:`Bearer ${w}`}})).data.choices[0].message.content.trim(),v=async()=>{try{let t=d.context,a=t.eventName,e=t.payload;if(a==="issue_comment"&&e.action==="created"&&e.comment&&e.issue){let p=e.comment.body,n=e.repository.owner.login,r=e.repository.name,m=e.issue.number;if(p.trim()==="/review"&&e.issue.pull_request){let c=e.issue.pull_request.url.split("/").pop();console.log(`Fetching files for PR ${c} in repo ${n}/${r}`);try{let{data:o}=await u.pulls.listFiles({owner:n,repo:r,pull_number:c}),l="";for(let i of o)if(i.patch){let f=await b(i.patch);l+=`### Review for ${i.filename}:

${f}

`}await u.issues.createComment({owner:n,repo:r,issue_number:m,body:l})}catch(o){console.error(`Error fetching PR files: ${o.message}`),o.response&&console.error(`Error details: ${JSON.stringify(o.response.data,null,2)}`),s.setFailed(`Error fetching PR files: ${o.message}`)}}}}catch(t){s.setFailed(t.message),t.response&&s.setFailed(`Error details: ${JSON.stringify(t.response.data,null,2)}`)}};v();
//# sourceMappingURL=index.js.map
